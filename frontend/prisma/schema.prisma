generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
    ADMIN
    MEMBER
    VIEWER
}

enum PropertyCategory {
    PRODUCT     @map("Product")
    PRICING     @map("Pricing")
    PARTNERSHIP @map("Partnership")
    BRANDING    @map("Branding")
    POSITIONING @map("Positioning")
}

model Workspace {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Billing related fields
    subscriptionStatus String?
    subscriptionPlan   String?

    // Relations
    users      UsersOnWorkspaces[]
    properties PropertiesOnWorkspaces[]
}

model User {
    id            String    @id @default(cuid())
    firstName     String
    lastName      String
    email         String    @unique
    emailVerified DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    workspaces UsersOnWorkspaces[]
}

model Property {
    id          String           @id @default(cuid())
    origin      String
    route       String
    category    PropertyCategory // Using enum instead of string
    coordinates Json // { points: [{ x: number, y: number },...] }
    threshold   Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    workspaces PropertiesOnWorkspaces[]
}

// Junction table for many-to-many relationship between User and Workspace
model UsersOnWorkspaces {
    id          String   @id @default(cuid())
    userId      String
    workspaceId String
    role        UserRole @default(MEMBER)

    // Relations
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([userId, workspaceId])
    @@index([userId])
    @@index([workspaceId])
}

// Junction table for many-to-many relationship between Property and Workspace
model PropertiesOnWorkspaces {
    id          String   @id @default(cuid())
    propertyId  String
    workspaceId String
    assignedAt  DateTime @default(now())

    // Relations
    property  Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([propertyId, workspaceId])
    @@index([propertyId])
    @@index([workspaceId])
}
